"""
@author: Julian Cabaleiro
@repository: https://github.com/juliancabaleiro/nidaqmx-python-examples

Acquire 30 min of analog waveform ai0 with TDMS mode, using start trigger 
and pause trigger, with trigger pulse generated by hardware 
with counter output.
For generate the trigger pulse two counters are used like co_tick_30min_2ctr.py

Signal
------
sin 5 Vpk; offset 0; frecuencia 1 kHz -> ai0, ai1

Pin out with BNC-2110
---------------------
PFI4 -> star trigger
PFI5 -> pause trigger
ai0 -> signal adquisition
PFI12/P2.4 -> ctr0 Output (trigger pulse generation)
PFI13/P2.5 -> ctr1 Output (time base pulse)

Connection
---------
PFI5 and PFI4 -> USER 2 (in terminal board)
PFI12 -> USER 2 (BNC)
signal -> ai0
PFI13/P2.5 -> USER 1 (in terminal board)
USER 1 (BNC) -> PFI 0/P1.0 

Notes
-----
No samples are lost in this acquisition
The tdms file use 2.64 Gb of disk
"""

import nidaqmx
import time 
from nptdms import TdmsFile
import matplotlib.pyplot as plt

system=nidaqmx.system.System.local()
print("Connected devices:")
print("\nList analog channels: ")
PCI_6133=system.devices["Dev1"]
PCI_6133.reset_device()
for ai in PCI_6133.ai_physical_chans:
    print(ai.name)

with nidaqmx.Task(new_task_name="PCI-CO0") as co_task, nidaqmx.Task(new_task_name="PCI-CO1") as co1_task, nidaqmx.Task(new_task_name="PCI-AI") as ai_task:
    
    #Pulse calculation
    ton=60*30
    tof=int(0.02*ton)
    f=8000
    cmax=16000000
    tick_on=f*ton
    tick_off=f*tof
    
    #Configure CTR1 frecuencia reference
    co1_task.co_channels.add_co_pulse_chan_freq(counter="/Dev1/Ctr1",
                                                name_to_assign_to_channel="ctr1_frec_ref",
                                                units=nidaqmx.constants.FrequencyUnits.HZ,
                                                idle_state=nidaqmx.constants.Level.LOW,
                                                initial_delay=0.0,
                                                freq=f,
                                                duty_cycle=0.5)
    
    print("\nTime base source for counter: ",co1_task.co_channels.all.co_ctr_timebase_src)
    print("Counter output terminal: ",co1_task.co_channels.all.co_pulse_term)

    #setup the timing for generate a pulse train while the task is runing
    co1_task.timing.cfg_implicit_timing(
                                        sample_mode=nidaqmx.constants.AcquisitionType.CONTINUOUS,
                                        samps_per_chan=100_000
    )

    #Configure CTR0 pulse trigger
    co_task.co_channels.add_co_pulse_chan_ticks(
                                                counter="/Dev1/Ctr0",
                                                source_terminal="/Dev1/PFI0",
                                                name_to_assign_to_channel="co_tick_conf",
                                                idle_state=nidaqmx.constants.Level.LOW,
                                                initial_delay=0,
                                                low_ticks=tick_off,
                                                high_ticks=tick_on)

    print("CTR0 Time base source: ",co_task.co_channels.all.co_ctr_timebase_src)
    print("CTR0 output terminal: ",co_task.co_channels.all.co_pulse_term)

    print("\nCTR1 Time base source: ",co1_task.co_channels.all.co_ctr_timebase_src)
    print("CTR1 output terminal: ",co1_task.co_channels.all.co_pulse_term)

    #add analog input channel
    ai_task.ai_channels.add_ai_voltage_chan(physical_channel="Dev1/ai0",
                                            min_val=-10.0,
                                            max_val=10.0,
                                            terminal_config= nidaqmx.constants.TerminalConfiguration.DIFF,
                                            units=nidaqmx.constants.VoltageUnits.VOLTS) #Dev1/ai0:4
    #Timing adquisition configuration
    frecuencia=800_000
    ai_task.timing.cfg_samp_clk_timing(rate=frecuencia,
                                       active_edge=nidaqmx.constants.Edge.RISING,
                                       sample_mode=nidaqmx.constants.AcquisitionType.CONTINUOUS,
                                       samps_per_chan=frecuencia)
   
    #Digital start trigger configuration
    ai_task.triggers.start_trigger.cfg_dig_edge_start_trig(
                                                        trigger_source="/Dev1/PFI4",
                                                        trigger_edge=nidaqmx.constants.Edge.RISING
    )
    
    #Digital Pause trigger configuration
    ai_task.triggers.pause_trigger.trig_type=nidaqmx.constants.TriggerType.DIGITAL_LEVEL
    ai_task.triggers.pause_trigger.dig_lvl_src="/Dev1/PFI5"                                                                                                                                                                                                                                                                                                                                                                                                                                      
    ai_task.triggers.pause_trigger.dig_lvl_when=nidaqmx.constants.Level.LOW

    path=r"TDMS\TDMS_30m\data_30m.tdms"
    #configure de TDMS mode
    #overwrite the existing file with the new and data only can be accesesed from data.tmds
    ai_task.in_stream.configure_logging(file_path=path,
                           logging_mode=nidaqmx.constants.LoggingMode.LOG,
                           operation=nidaqmx.constants.LoggingOperation.CREATE_OR_REPLACE)
    
    #start secuence
    ai_task.start()
    co1_task.start()
    co_task.start()
    print("\nStart measurement")
    time.sleep(ton+tof+5)
    print("\nFinish measurement")
    co_task.stop()
    co1_task.stop()
    ai_task.stop()

#Open de data_tdms_co.py to see data
tdms_file = TdmsFile.read(path)

for group in tdms_file.groups():
    group_name = group.name
    print("\n\nGroup name: ",group_name)
    for channel in group.channels():
        channel_name = channel.name
        print("\nChannel name: ", channel_name)
        properties = channel.properties
        print("\nProperties:")
        for prop_n in properties:
            print(prop_n, " : ", properties[prop_n])
        med=channel[:]
        print("\nSome Measurements:", med[1:3])
        print("Measurement dimension",len(med))
        
"""
Output
------
List analog channels:
Dev1/ai0
Dev1/ai1
Dev1/ai2
Dev1/ai3
Dev1/ai4
Dev1/ai5
Dev1/ai6
Dev1/ai7

List of counter input ['Dev1/ctr0', 'Dev1/ctr1']
List of counter output ['Dev1/ctr0', 'Dev1/ctr1', 'Dev1/fre
qout']

Time base source for counter:  /Dev1/MasterTimebase
Counter output terminal:  /Dev1/Ctr1Out

CTR0 Time base source:  /Dev1/PFI0
CTR0 output terminal:  /Dev1/Ctr0Out

CTR1 Time base source:  /Dev1/MasterTimebase
CTR1 output terminal:  /Dev1/Ctr1Out

Start measurement

Finish measurement

Group name:  PCI-AI

Channel name:  Dev1/ai0

Properties:
NI_Scaling_Status  :  unscaled
NI_Number_Of_Scales  :  2
NI_Scale[1]_Scale_Type  :  Linear
NI_Scale[1]_Linear_Slope  :  0.00030517578125
NI_Scale[1]_Linear_Y_Intercept  :  0.0
NI_Scale[1]_Linear_Input_Source  :  0
NI_ChannelName  :  Dev1/ai0
unit_string  :  Volts
NI_UnitDescription  :  Volts
wf_start_time  :  2024-03-26T17:31:16.283818
wf_increment  :  1.249999999999949e-06
wf_start_offset  :  0.0
wf_samples  :  1

Some Measurements: [-0.6262207 -0.6262207]
Measurement dimention 1440000000

"""